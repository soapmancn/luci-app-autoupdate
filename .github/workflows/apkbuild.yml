name: APKBUILD Package

on:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Build APK package in Alpine
        uses: addnab/docker-run-action@v3
        with:
          image: alpine:edge
          options: -v ${{ github.workspace }}:/workspace
          run: |
            # 添加必要的仓库
            echo "https://dl-cdn.alpinelinux.org/alpine/edge/main" > /etc/apk/repositories
            echo "https://dl-cdn.alpinelinux.org/alpine/edge/community" >> /etc/apk/repositories
            echo "https://dl-cdn.alpinelinux.org/alpine/edge/testing" >> /etc/apk/repositories
            
            # 更新系统并安装基础包
            apk update
            apk add alpine-sdk build-base fakeroot sudo git

            # 创建必要目录
            mkdir -p /var/cache/distfiles /home/builder/packages/x86_64
            
            # 创建构建用户
            adduser -D builder
            echo "builder ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
            addgroup builder abuild
            
            # 设置构建环境
            chown -R builder:abuild /var/cache/distfiles /home/builder /workspace
            
            # 构建过程
            su builder -c "
              cd /workspace
              git config --global --unset http.https://github.com/.extraheader || true
              export PACKAGER='GitHub Actions <github@actions>'
              abuild-keygen -a -i -n
              abuild checksum
              abuild -r -K
            "
            
            # 检查构建结果
            mkdir -p /workspace/packages
            if ! find /home/builder/packages -name '*.apk' -exec cp {} /workspace/packages/ \; ; then
              echo "No APK files found!"
              exit 1
            fi
            ls -la /workspace/packages/

      - name: Generate Tag
        run: |
          if [ ! -d "packages" ] || [ -z "$(ls -A packages/*.apk 2>/dev/null)" ]; then
            echo "Error: No APK files found in packages directory"
            exit 1
          fi
          timestamp=$(date +%Y%m%d%H%M%S)
          echo "BUILD_DATE=$timestamp" >> $GITHUB_ENV
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git tag "v$timestamp"
          git push origin "v$timestamp"

      - name: Create Release
        if: success()
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.BUILD_DATE }}
          files: packages/*.apk
          name: Release v${{ env.BUILD_DATE }}
          draft: false
          prerelease: false
          body: |
            Alpine Package Build at v${{ env.BUILD_DATE }}
            Automated build from GitHub Actions
